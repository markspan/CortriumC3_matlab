function GUI_C3()
% WORK IN PROGRESS! Needs cleanup from old code, etc.

%% Initialize variables

% create new C3 object, empty until a sensor data directory has been selected
C3 = cortrium_c3('');

% Set a temporary screen resolution of 1920x1080 pixels while we construct GUI.
% Will be modified to actual screen resolution before GUI is displayed.
% Currently the GUI doesn't scale well to resolutions much smaller than
% 1920x1080.
screenWidth = 1920;
screenHeight = 1080;

panelColor = [0.9 0.9 0.9]; % color of panel background
editBgColor = [1.0 1.0 1.0]; % color of text edit boxes
panelBorderColor = [1.0 1.0 1.0]; % color of the line between panels
global colGreen;
global colBlue;
global colRed;
colGreen = [0.0 0.85 0.0];
colBlue = [0 0 1];
colRed = [1 0 0];

% (CLEAN UP) global variable for median filtered Accel data
global data_accel_medfilt;
data_accel_medfilt = 0;

dirName = '';
pathAndFile = '';
participantId = '';
testNumber = 0;

plotDefaultRangeX = 6000; % 6000 samples = one minute
plotRangeX = plotDefaultRangeX;

%% GUI

% Create GUI window, visibility is turned off while the GUI elements are added
hFig = figure('Name','C3 sensor data',...
    'Numbertitle','off',...
    'OuterPosition', [0 0 screenWidth screenHeight],...
    'MenuBar', 'None',...
    'Toolbar','figure',...
    'Visible','off',...
    'ResizeFcn',@resizeFcn,...
    'CloseRequestFcn',@closeRequestFcn);

% create a parent panel for sub-panels in the figure window
hPanelMain = uipanel('BorderType','none','Position',[0 0 1 1],...
    'BackgroundColor',panelColor);

%-----Panel: Load Data-----%

% create a panel for "Load Data" button
hPanelLoad = uipanel('Parent',hPanelMain,...
    'Title','Load Sensor Data',...
    'BorderType','line',... % 'BackgroundColor',editBgColor,...
    'HighlightColor',panelBorderColor,...
    'Position',[0.84 0.89 0.15 0.1],...
    'BackgroundColor',panelColor);

% Button to open dialog box, to select a folder with sensor data
hLoadButton = uicontrol('Parent',hPanelLoad,...
    'Style','pushbutton',...
    'Position',[8,8,68,15],...
    'String','Load Sensor Data',...
    'FontSize',12,...
    'Callback',@(~,~)loadButtonFcn);

%-----Panel: Directory Info-----%

% create a panel for directory (folder) info
hPanelParticipant = uipanel('Parent',hPanelMain,...
    'Title','Directory Info',...
    'BorderType','line',... % 'BackgroundColor',editBgColor,...
    'HighlightColor',panelBorderColor,...
    'Position',[0.84 0.77 0.15 0.11],...
    'BackgroundColor',panelColor);

% Text label, folder parent level 2 up
hLabelDirUp2 = uicontrol('Parent',hPanelParticipant,...
    'style','text',...
    'position',[8,22,6,6],...
    'HorizontalAlignment','left',...
    'String',['..' filesep],...
    'FontWeight','bold',...
    'FontSize',10,...
    'BackgroundColor',panelColor);

% Text, folder parent level 2 up
hTextDirUp2 = uicontrol('Parent',hPanelParticipant,...
    'style','text',...
    'position',[14,22,62,6],...
    'HorizontalAlignment','left',...
    'String','',...
    'FontSize',10,...
    'BackgroundColor',panelColor);

% Text label, folder parent level 1 up
hLabelDirUp1 = uicontrol('Parent',hPanelParticipant,...
    'style','text',...
    'position',[8,14,6,6],...
    'HorizontalAlignment','left',...
    'String',['.' filesep],...
    'FontWeight','bold',...
    'FontSize',10,...
    'BackgroundColor',panelColor);

% Text, folder parent level 1 up
hTextDirUp1= uicontrol('Parent',hPanelParticipant,...
    'style','text',...
    'position',[14,14,62,6],...
    'HorizontalAlignment','left',...
    'String','',...
    'FontSize',10,...
    'BackgroundColor',panelColor);

% Text label, folder level 0
hLabelDirUp0 = uicontrol('Parent',hPanelParticipant,...
    'style','text',...
    'position',[8,6,6,6],...
    'HorizontalAlignment','left',...
    'String',filesep,...
    'FontWeight','bold',...
    'FontSize',10,...
    'BackgroundColor',panelColor);

% Text, folder level 0
hTextDirUp0 = uicontrol('Parent',hPanelParticipant,...
    'style','text',...
    'position',[14,6,62,6],...
    'HorizontalAlignment','left',...
    'String','',...
    'FontSize',10,...
    'BackgroundColor',panelColor);

%-----Panel: Navigate Sensor Data-----%

% create a panel for buttons to navigate and export features from the data
hPanelNavigateData = uipanel('Parent',hPanelMain,...
    'Title','Navigate Sensor Data',...
    'BorderType','line',... %
    'HighlightColor',panelBorderColor,...
    'Position',[0.84 0.4 0.15 0.36],...
    'BackgroundColor',panelColor);

% Button, Reset Range
hResetRangeButton = uicontrol('Parent',hPanelNavigateData,...
    'Style','pushbutton',...
    'Enable','off',...
    'Position',[8,114,69,18],...
    'String','Reset Range',...
    'FontSize',12,...
    'Callback',@ResetRangeFcn);

% Text label, display range start
hLabelRangeStart = uicontrol('Parent',hPanelNavigateData,...
    'style','text',...
    'position',[8,102,20,8],...
    'HorizontalAlignment','left',...
    'String','Start:',...
    'FontSize',10,...
    'BackgroundColor',panelColor);

% Text label, display range end
hLabelRangeEnd = uicontrol('Parent',hPanelNavigateData,...
    'style','text',...
    'position',[48,102,20,8],...
    'HorizontalAlignment','left',...
    'String','End:',...
    'FontSize',10,...
    'BackgroundColor',panelColor);

% Text edit, display range start HH
hEditStartHH = uicontrol('Parent',hPanelNavigateData,...
    'style','edit',...
    'position',[8,94,8,9],...
    'HorizontalAlignment','center',...
    'FontSize',10,...
    'BackgroundColor',editBgColor);

% Text edit, display range start MM
hEditStartMM = uicontrol('Parent',hPanelNavigateData,...
    'style','edit',...
    'position',[18,94,8,9],...
    'HorizontalAlignment','center',...
    'FontSize',10,...
    'BackgroundColor',editBgColor);

% Text edit, display range start SS
hEditStartSS = uicontrol('Parent',hPanelNavigateData,...
    'style','edit',...
    'position',[28,94,8,9],...
    'HorizontalAlignment','center',...
    'FontSize',10,...
    'BackgroundColor',editBgColor);

% Text label, display range dash
hLabelRangeStartDash = uicontrol('Parent',hPanelNavigateData,...
    'style','text',...
    'position',[38,94,8,9],...
    'HorizontalAlignment','center',...
    'String','--',...
    'FontSize',10,...
    'BackgroundColor',panelColor);

% Text edit, display range end HH
hEditEndHH = uicontrol('Parent',hPanelNavigateData,...
    'style','edit',...
    'position',[48,94,8,9],...
    'HorizontalAlignment','center',...
    'FontSize',10,...
    'BackgroundColor',editBgColor);

% Text edit, display range end MM
hEditEndMM = uicontrol('Parent',hPanelNavigateData,...
    'style','edit',...
    'position',[58,94,8,9],...
    'HorizontalAlignment','center',...
    'FontSize',10,...
    'BackgroundColor',editBgColor);

% Text edit, display range end SS
hEditEndSS = uicontrol('Parent',hPanelNavigateData,...
    'style','edit',...
    'position',[68,94,8,9],...
    'HorizontalAlignment','center',...
    'FontSize',10,...
    'BackgroundColor',editBgColor);

% Text label, display range start HH
hLabelStartHH = uicontrol('Parent',hPanelNavigateData,...
    'style','text',...
    'position',[8,86,8,8],...
    'HorizontalAlignment','center',...
    'String','HH',...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Text label, display range start MM
hLabelStartMM = uicontrol('Parent',hPanelNavigateData,...
    'style','text',...
    'position',[18,86,8,8],...
    'HorizontalAlignment','center',...
    'String','MM',...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Text label, display range start SS
hLabelStartSS = uicontrol('Parent',hPanelNavigateData,...
    'style','text',...
    'position',[28,86,8,8],...
    'HorizontalAlignment','center',...
    'String','SS',...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Text label, display range end HH
hLabelEndHH = uicontrol('Parent',hPanelNavigateData,...
    'style','text',...
    'position',[48,86,8,8],...
    'HorizontalAlignment','center',...
    'String','HH',...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Text label, display range end MM
hLabelEndMM = uicontrol('Parent',hPanelNavigateData,...
    'style','text',...
    'position',[58,86,8,8],...
    'HorizontalAlignment','center',...
    'String','MM',...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Text label, display range end SS
hLabelEndSS = uicontrol('Parent',hPanelNavigateData,...
    'style','text',...
    'position',[68,86,8,8],...
    'HorizontalAlignment','center',...
    'String','SS',...
    'FontSize',8,...
    'BackgroundColor',panelColor);

hRangeSlider = uicontrol('Parent',hPanelNavigateData,...
    'Style','slider',...
    'Enable','off',...
    'Position',[8,74,68,10],...
    'Min',0,'Max',20000,...
    'Value',plotRangeX,...
    'SliderStep',[0.005 0.05],...
    'BackgroundColor',panelColor,...
    'Callback',@rangeSliderFcn);

% Button, First 1 Second
hFirst1SecButton = uicontrol('Parent',hPanelNavigateData,...
    'Style','pushbutton',...
    'Enable','off',...
    'Position',[8,52,32,14],...
    'String','First 1 sec',...
    'FontSize',10);
    %'Callback',@First1SecFcn);

% Button, First 10 Seconds
hFirst10SecButton = uicontrol('Parent',hPanelNavigateData,...
    'Style','pushbutton',...
    'Enable','off',...
    'Position',[45,52,32,14],...
    'String','First 10 sec',...
    'FontSize',10);
    %'Callback',@First10SecFcn);

%-----Panel: Filter Sensor Data-----%

% create a panel for buttons to navigate and export features from the data
hPanelFilterData = uipanel('Parent',hPanelMain,...
    'Title','Filter Sensor Data',...
    'BorderType','line',... %
    'HighlightColor',panelBorderColor,...
    'Position',[0.84 0.01 0.15 0.38],...
    'BackgroundColor',panelColor);

%-----Panel: Sensor Samples Display-----%

% create a panel for data visualization
hPanelSensorDisplay = uipanel('Parent',hPanelMain,...
    'Title','Sensor Data Display',...
    'BorderType','line',...
    'HighlightColor',panelBorderColor,...
    'Position',[0.01 0.01 0.82 0.98],...
    'BackgroundColor',panelColor);

% Text label, for ECG plot
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.2,0.965,0.6,0.025],...
    'HorizontalAlignment','center',...
    'String','ECG',...
    'FontWeight','bold',...
    'FontSize',12,...
    'BackgroundColor',panelColor);

% Axes object for ECG plot
hAxesECG = axes('Parent',hPanelSensorDisplay,...
    'Position',[0.05,0.79,0.9,0.175]);
%xlim('manual');
%ylim('manual');
% set(gca, 'YLimMode', 'manual');
%xlim(hAxesECG,[minXsensorData,maxXsensorData]);
%ylim(hAxesECG,[minYsensorData,maxYsensorData]);
hold on;

% Button, Create ECG plot in a new window
uicontrol('Parent',hPanelSensorDisplay,...
    'Style','pushbutton',...
    'Units','normalized',...
    'Position',[0.951,0.945,0.015,0.022],...
    'String','^',...
    'FontSize',12,...
    'Callback',@ecgWinFunc);

% Button, toggles ECG_1 plot
hECG1Checkbox = uicontrol('Parent',hPanelSensorDisplay,...
    'Style','checkbox',...
    'Units','normalized',...
    'Position',[0.951,0.92,0.015,0.022],...
    'Value',1,...
    'BackgroundColor',panelColor,...
    'Callback',@ecgPlotFunc);

% Text label, for ECG_1 toggle button
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.962,0.92,0.03,0.018],...
    'HorizontalAlignment','left',...
    'String','ECG_1',...
    'FontWeight','normal',...
    'ForegroundColor',[1.0 0 0],...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Button, toggles ECG_2 plot
hECG2Checkbox = uicontrol('Parent',hPanelSensorDisplay,...
    'Style','checkbox',...
    'Units','normalized',...
    'Position',[0.951,0.899,0.015,0.022],...
    'Value',1,...
    'BackgroundColor',panelColor,...
    'Callback',@ecgPlotFunc);

% Text label, for ECG_2 toggle button
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.962,0.899,0.03,0.018],...
    'HorizontalAlignment','left',...
    'String','ECG_2',...
    'FontWeight','normal',...
    'ForegroundColor',colGreen,...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Button, toggles ECG_3 plot
hECG3Checkbox = uicontrol('Parent',hPanelSensorDisplay,...
    'Style','checkbox',...
    'Units','normalized',...
    'Position',[0.951,0.878,0.015,0.022],...
    'Value',1,...
    'BackgroundColor',panelColor,...
    'Callback',@ecgPlotFunc);

% Text label, for ECG_3 toggle button
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.962,0.878,0.03,0.018],...
    'HorizontalAlignment','left',...
    'String','ECG_3',...
    'FontWeight','normal',...
    'ForegroundColor',[0 0 1.0],...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Text label, for Respiration plot (impedance)
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.2,0.71,0.6,0.025],...
    'HorizontalAlignment','center',...
    'String','Respiration',...
    'FontWeight','bold',...
    'FontSize',12,...
    'BackgroundColor',panelColor);

% Axes object for Respiration plot (impedance)
hAxesResp = axes('Parent',hPanelSensorDisplay,...
    'Position',[0.05,0.535,0.9,0.175]);
% xlim('manual');
% ylim('manual');
% set(gca, 'YLimMode', 'manual');
% xlim(hAxesResp,[minXsensorData,maxXsensorData]);
% ylim(hAxesResp,[minYsensorData,maxYsensorData]);
hold on;

% Button, Create Respiration plot in a new window
uicontrol('Parent',hPanelSensorDisplay,...
    'Style','pushbutton',...
    'Units','normalized',...
    'Position',[0.951,0.69,0.015,0.022],...
    'String','^',...
    'FontSize',12,...
    'Callback', @respWinFunc);

% Text label, for Acceleration plot
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.2,0.455,0.6,0.025],...
    'HorizontalAlignment','center',...
    'String','Acceleration',...
    'FontWeight','bold',...
    'FontSize',12,...
    'BackgroundColor',panelColor);

% Axes object for Acceleration plot
hAxesAccel = axes('Parent',hPanelSensorDisplay,...
    'Position',[0.05,0.28,0.9,0.175]);
% xlim('manual');
% ylim('manual');
% xlim(hAxesAccel,[minXhr,maxXhr]);
% ylim(hAxesAccel,[minYhr,maxYhr]);
hold on;

% Button, Create Acceleration plot in a new window
uicontrol('Parent',hPanelSensorDisplay,...
    'Style','pushbutton',...
    'Units','normalized',...
    'Position',[0.951,0.435,0.015,0.022],...
    'String','^',...
    'FontSize',12,...
    'Callback', @accelWinFunc);

% Button, toggles Accel_X plot
hAccelXCheckbox = uicontrol('Parent',hPanelSensorDisplay,...
    'Style','checkbox',...
    'Units','normalized',...
    'Position',[0.951,0.41,0.015,0.022],...
    'Value',1,...
    'BackgroundColor',panelColor,...
    'Callback',@accelPlotFunc);

% Text label, for Accel_X toggle button
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.962,0.41,0.03,0.018],...
    'HorizontalAlignment','left',...
    'String','Accel_X',...
    'FontWeight','normal',...
    'ForegroundColor',[1.0 0 0],...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Button, toggles Accel_Y plot
hAccelYCheckbox = uicontrol('Parent',hPanelSensorDisplay,...
    'Style','checkbox',...
    'Units','normalized',...
    'Position',[0.951,0.389,0.015,0.022],...
    'Value',1,...
    'BackgroundColor',panelColor,...
    'Callback',@accelPlotFunc);

% Text label, for Accel_Y toggle button
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.962,0.389,0.03,0.018],...
    'HorizontalAlignment','left',...
    'String','Accel_Y',...
    'FontWeight','normal',...
    'ForegroundColor',colGreen,...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Button, toggles Accel_Z plot
hAccelZCheckbox = uicontrol('Parent',hPanelSensorDisplay,...
    'Style','checkbox',...
    'Units','normalized',...
    'Position',[0.951,0.368,0.015,0.022],...
    'Value',1,...
    'BackgroundColor',panelColor,...
    'Callback',@accelPlotFunc);

% Text label, for Accel_Z toggle button
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.962,0.368,0.03,0.018],...
    'HorizontalAlignment','left',...
    'String','Accel_Z',...
    'FontWeight','normal',...
    'ForegroundColor',[0 0 1.0],...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Button, toggles Accel median filtered plot
hAccelMedfiltCheckbox = uicontrol('Parent',hPanelSensorDisplay,...
    'Style','checkbox',...
    'Units','normalized',...
    'Position',[0.951,0.347,0.015,0.022],...
    'Value',1,...
    'BackgroundColor',panelColor,...
    'Callback',@accelPlotFunc);

% Text label, for Accel median filtered toggle button
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.962,0.347,0.03,0.018],...
    'HorizontalAlignment','left',...
    'String','Medfilt',...
    'FontWeight','normal',...
    'ForegroundColor',[0 0 0],...
    'FontSize',8,...
    'BackgroundColor',panelColor);

% Text label, for Temperature plot
uicontrol('Parent',hPanelSensorDisplay,...
    'style','text',...
    'Units','normalized',...
    'position',[0.2,0.215,0.6,0.025],...
    'HorizontalAlignment','center',...
    'String','Temperature',...
    'FontWeight','bold',...
    'FontSize',12,...
    'BackgroundColor',panelColor);

% Axes object for Temperature plot
hAxesTemp = axes('Parent',hPanelSensorDisplay,...
    'Position',[0.05,0.04,0.9,0.175]);
% xlim('manual');
% ylim('manual');
% xlim(hAxesTemp,[minXhr,maxXhr]);
% ylim(hAxesTemp,[minYhr,maxYhr]);
hold on;

% Button, Create Temperature plot in a new window
uicontrol('Parent',hPanelSensorDisplay,...
    'Style','pushbutton',...
    'Units','normalized',...
    'Position',[0.951,0.195,0.015,0.022],...
    'String','^',...
    'FontSize',12,...
    'Callback', @tempWinFunc);

%% Units that were in pixels are set to normalized units

% Change units to normalized so components resize automatically.
set([hLoadButton,hLabelDirUp2,hTextDirUp2,hLabelDirUp1,hTextDirUp1,...
    hLabelDirUp0,hTextDirUp0,hResetRangeButton,...
    hLabelRangeStart,hLabelRangeEnd,hEditStartHH,hEditStartMM,hEditStartSS,...
    hLabelRangeStartDash,hEditEndHH,hEditEndMM,hEditEndSS,...
    hLabelStartHH,hLabelStartMM,hLabelStartSS,...
    hLabelEndHH,hLabelEndMM,hLabelEndSS,hRangeSlider,...
    hFirst1SecButton,hFirst10SecButton],...
    'Units','normalized');

%% get actual screen size and set figure window accordingly

% get screen size
screenSize = get(0,'screensize');
screenWidth = screenSize(3);
screenHeight = screenSize(4);
set(hFig,'OuterPosition', [0 0 screenWidth screenHeight]);

%% Make the GUI visible

set(hFig,'Visible','on');

%% Functions (inline)

    function loadButtonFcn()
        dirName = uigetdir();
        if dirName % if a directory was selected
            %display(dirName);
            updateDirectoryInfo;
            loadAndFormatData;
            setRangeEdits(C3,hEditStartHH,hEditStartMM,hEditStartSS,hEditEndHH,hEditEndMM,hEditEndSS);
            plotSensorData;
        end
    end

    function loadAndFormatData()
        % Create a new C3 object
        C3 = cortrium_c3(dirName);

        % Initialise components and load data
        C3.initialize;

        % Clean accelerometer and temperature data for jitter
        C3.clean_sensor_data;

        % Smoothen respiration data
        C3.resp.smoothen;
        
        % Filtering of Accel data
%         h = fdesign.lowpass('N,Fp,Fst',256,0.5,0.8,C3.accel.fs);
%             d = design(h,'equiripple');
%             %            fvtool(d)
%         data_accel_medfilt = filtfilt(d.Numerator,1, C3.accel.data); %zero-phase filtering            
        data_accel_medfilt = medfilt1(C3.accel.data,C3.accel.fs); % remove impulse noise
    
    end

    function loadTimestamps()
        timestamps_pathAndFile = [dirName participantId '_info.txt'];
        timestamps_fid = fopen(timestamps_pathAndFile,'r');
        % call fgetl 4 times to skip the first 4 lines
        for k=1:4
            fgetl(timestamps_fid);
        end
        % read the next 7 lines and store uiTimestamps and uiState info
        for k=1:7
            timeUiStateString = fgetl(timestamps_fid);
            timeUiStateCellArray = textscan(timeUiStateString,'%f %d');
            uiTimestamps(k,1) = timeUiStateCellArray{1,1};
            uiStates(k,1) = timeUiStateCellArray{1,2};
        end
        fclose(timestamps_fid);
        % tIdx = find(uiStates == 3);
    end

    function plotSensorData()
        plotECG(C3,hAxesECG,hECG1Checkbox,hECG2Checkbox,hECG3Checkbox)
        plotResp(C3,hAxesResp);
        plotAccel(C3,hAxesAccel,hAccelXCheckbox,hAccelYCheckbox,hAccelZCheckbox,hAccelMedfiltCheckbox);
        plotTemp(C3,hAxesTemp);
    end

    function ResetRangeFcn(varargin)
       
    end

    function rangeSliderFcn(varargin)

    end

    function updateDirectoryInfo()
        dirNameParts = strsplit(dirName,filesep);
        %display(dirNameParts);
        set(hTextDirUp2,'String',dirNameParts(length(dirNameParts)-2));
        set(hTextDirUp1,'String',dirNameParts(length(dirNameParts)-1));
        set(hTextDirUp0,'String',dirNameParts(length(dirNameParts)));
    end

%% Functions for updating plots, based on checkbox selections
% (CLEAN UP) The callback from the buttons should be modified so they call
% the plot functions directly - not using this intermediate function.

    function ecgPlotFunc(varargin)
        plotECG(C3,hAxesECG,hECG1Checkbox,hECG2Checkbox,hECG3Checkbox);
    end

    function accelPlotFunc(varargin)
        %display(varargin);
        plotAccel(C3,hAxesAccel,hAccelXCheckbox,hAccelYCheckbox,hAccelZCheckbox,hAccelMedfiltCheckbox);
    end

%% Functions for creating separate, floating plot windows

    function ecgWinFunc(varargin)
        %--- creates a new, floating window for the ECG plot ---%
        %calculate total sample time (= samples / sample freq)
        sampletime = length(C3.ecg.data)/C3.ecg.fs;
        % create x-axis values
        xAxisTimeSeconds = linspace(0,sampletime,length(C3.ecg.data));
        hECGFig = figure('Numbertitle','off','Name','ECG');
        hAxesECGWindow = axes;
        hold on;
        % build a cell array for the plot legend, and plot according to selected checkboxes
        legendList = cell(0);
        if get(hECG1Checkbox, 'Value') == 1 % is checkbox for ECG_1 is ON
            plot(hAxesECGWindow,xAxisTimeSeconds,C3.ecg.data(:,1),'r','LineWidth',1);
            legendList(length(legendList)+1) = {'ECG\_1'};
        end
        if get(hECG2Checkbox, 'Value') == 1 % is checkbox for ECG_2 is ON
            plot(hAxesECGWindow,xAxisTimeSeconds,C3.ecg.data(:,2),'g','LineWidth',1);
            legendList(length(legendList)+1) = {'ECG\_2'};
        end
        if get(hECG3Checkbox, 'Value') == 1 % is checkbox for ECG_3 is ON
            plot(hAxesECGWindow,xAxisTimeSeconds,C3.ecg.data(:,3),'b','LineWidth',1);
            legendList(length(legendList)+1) = {'ECG\_3'};
        end
        title('ECG','FontSize',12,'FontWeight','bold');
        xlabel('time [seconds]','FontSize',12);
        ylabel('sample value','FontSize',12);
        legend(hAxesECGWindow,legendList,'Location','northoutside','Orientation','horizontal');
        set(hAxesECGWindow,'FontSize',11);
    end

    function respWinFunc(varargin)
        %--- creates a new, floating window for the ECG plot ---%
        %calculate total sample time (= samples / sample freq)
        sampletime = length(C3.resp.data)/C3.resp.fs;
        % create x-axis values
        xAxisTimeSeconds = linspace(0,sampletime,length(C3.resp.data));
        hRespFig = figure('Numbertitle','off','Name','Respiration');
        hAxesRespWindow = axes;
        hold on;
        plot(hAxesRespWindow,xAxisTimeSeconds,C3.resp.data,'r','LineWidth',1);
        title('Respiration','FontSize',12,'FontWeight','bold');
        xlabel('time [seconds]','FontSize',12);
        ylabel('sample value','FontSize',12);
        legend(hAxesRespWindow,'Respiration','Location','northoutside','Orientation','horizontal');
        set(hAxesRespWindow,'FontSize',11);
    end

    function accelWinFunc(varargin)
        %--- creates a new, floating window for the Acceleration plot ---%
        %calculate total sample time (= samples / sample freq)
        sampletime = length(C3.accel.data)/C3.accel.fs;
        % create x-axis values
        xAxisTimeSeconds = linspace(0,sampletime,length(C3.accel.data));
        hAccelFig = figure('Numbertitle','off','Name','Acceleration');
        hAxesAccelWindow = axes;
        hold on;
        % build a cell array for the plot legend, and plot according to selected checkboxes
        legendList = cell(0);
        if get(hAccelXCheckbox, 'Value') == 1 % is checkbox for Accel_X is ON
            plot(hAxesAccelWindow,xAxisTimeSeconds,C3.accel.data(:,1),'r','LineWidth',1);
            legendList(length(legendList)+1) = {'Accel\_X'};
        end
        if get(hAccelYCheckbox, 'Value') == 1 % is checkbox for Accel_Y is ON
            plot(hAxesAccelWindow,xAxisTimeSeconds,C3.accel.data(:,2),'g','LineWidth',1);
            legendList(length(legendList)+1) = {'Accel\_Y'};
        end
        if get(hAccelZCheckbox, 'Value') == 1 % is checkbox for Accel_Z is ON
            plot(hAxesAccelWindow,xAxisTimeSeconds,C3.accel.data(:,3),'b','LineWidth',1);
            legendList(length(legendList)+1) = {'Accel\_Z'};
        end
        title('Acceleration','FontSize',12,'FontWeight','bold');
        xlabel('time [seconds]','FontSize',12);
        ylabel('sample value','FontSize',12);
        legend(hAxesAccelWindow,legendList,'Location','northoutside','Orientation','horizontal');
        set(hAxesAccelWindow,'FontSize',11);
    end

    function tempWinFunc(varargin)
        %--- creates a new, floating window for the Temperature plot ---%
        %calculate total sample time (= samples / sample freq)
        sampletime = length(C3.temp.data)/C3.temp.fs;
        % create x-axis values
        xAxisTimeSeconds = linspace(0,sampletime,length(C3.temp.data));
        hTempFig = figure('Numbertitle','off','Name','Temperature');
        hAxesTempWindow = axes;
        hold on;
        plot(hAxesTempWindow,xAxisTimeSeconds,C3.temp.data(:,1),'r','LineWidth',1);
        plot(hAxesTempWindow,xAxisTimeSeconds,C3.temp.data(:,2),'g','LineWidth',1);
        title('Temperature','FontSize',12,'FontWeight','bold');
        xlabel('time [seconds]','FontSize',12);
        ylabel('sample value','FontSize',12);
        legend(hAxesTempWindow,'Temp\_1','Temp\_2','Location','northoutside','Orientation','horizontal');
        set(hAxesTempWindow,'FontSize',11);
    end

    function resizeFcn(varargin)
        % Is called when the figure window is created, and when resized.
        % Might be used later to implement changing font size depending on
        % GUI window size, since all other elements are relatively sized.
        currFigPos = get(hFig,'Position');
        figWidth = currFigPos(3);
        figHeight = currFigPos(4);
        %disp(['Figure pos: ' num2str(currFigPos(1)) ' ' num2str(currFigPos(2)) ' ' num2str(figWidth) ' ' num2str(figHeight)]);
    end

    function closeRequestFcn(varargin)
        fclose all;
        closereq; % Close the GUI Window
    end
end

%% Functions (Work in progress... starting to move inline functions outside of main function. Also, old code from previous project needs to be repurposed or deleted.)

function plotECG(C3,hAxesECG,hECG1Checkbox,hECG2Checkbox,hECG3Checkbox)
    global colGreen;
    global colBlue;
    global colRed;

    %calculate total sample time (= samples / sample freq)
    sampletime = length(C3.ecg.data)/C3.ecg.fs;
    % create x-axis values
    xAxisTimeSeconds = linspace(0,sampletime,length(C3.ecg.data));
    % clear the plot, then create new plot
    cla(hAxesECG);
    if get(hECG1Checkbox, 'Value') == 1 % is checkbox for ECG_1 is ON
        plot(hAxesECG,xAxisTimeSeconds,C3.ecg.data(:,1),'r','LineWidth',1);
    end
    if get(hECG2Checkbox, 'Value') == 1 % is checkbox for ECG_2 is ON
        plot(hAxesECG,xAxisTimeSeconds,C3.ecg.data(:,2),'g','LineWidth',1);
    end
    if get(hECG3Checkbox, 'Value') == 1 % is checkbox for ECG_3 is ON
        plot(hAxesECG,xAxisTimeSeconds,C3.ecg.data(:,3),'b','LineWidth',1);
    end
end

function plotResp(C3,hAxesResp)
    %calculate total sample time (= samples / sample freq)
    sampletime = length(C3.resp.data)/C3.resp.fs;
    % create x-axis values
    xAxisTimeSeconds = linspace(0,sampletime,length(C3.resp.data));
    cla(hAxesResp);
    plot(hAxesResp,xAxisTimeSeconds,C3.resp.data,'r','LineWidth',1);
end

function plotAccel(C3,hAxesAccel,hAccelXCheckbox,hAccelYCheckbox,hAccelZCheckbox,hAccelMedfiltCheckbox);
    global data_accel_medfilt;
    %calculate total sample time (= samples / sample freq)
    sampletime = length(C3.accel.data)/C3.accel.fs;
    % create x-axis values
    xAxisTimeSeconds = linspace(0,sampletime,length(C3.accel.data));
    cla(hAxesAccel);
    if get(hAccelXCheckbox, 'Value') == 1 % is checkbox for Accel_X ON
        if get(hAccelMedfiltCheckbox, 'Value') == 1 % is checkbox for Medfilt ON
            plot(hAxesAccel,xAxisTimeSeconds,data_accel_medfilt(:,1),'r','LineWidth',1);
        else
            plot(hAxesAccel,xAxisTimeSeconds,C3.accel.data(:,1),'r','LineWidth',1);
        end
    end
    if get(hAccelYCheckbox, 'Value') == 1 % is checkbox for Accel_Y ON
        if get(hAccelMedfiltCheckbox, 'Value') == 1 % is checkbox for Medfilt ON
            plot(hAxesAccel,xAxisTimeSeconds,data_accel_medfilt(:,2),'g','LineWidth',1);
        else
            plot(hAxesAccel,xAxisTimeSeconds,C3.accel.data(:,2),'g','LineWidth',1);
        end
    end
    if get(hAccelZCheckbox, 'Value') == 1 % is checkbox for Accel_Z ON
        if get(hAccelMedfiltCheckbox, 'Value') == 1 % is checkbox for Medfilt ON
            plot(hAxesAccel,xAxisTimeSeconds,data_accel_medfilt(:,3),'b','LineWidth',1);
        else
            plot(hAxesAccel,xAxisTimeSeconds,C3.accel.data(:,3),'b','LineWidth',1);
        end
    end
end

function plotTemp(C3,hAxesTemp)
    %calculate total sample time (= samples / sample freq)
    sampletime = length(C3.temp.data)/C3.temp.fs;
    % create x-axis values
    xAxisTimeSeconds = linspace(0,sampletime,length(C3.temp.data));
    cla(hAxesTemp);
    plot(hAxesTemp,xAxisTimeSeconds,C3.temp.data(:,1),'r','LineWidth',1);
    plot(hAxesTemp,xAxisTimeSeconds,C3.temp.data(:,2),'g','LineWidth',1);
    xlabel(hAxesTemp,'time [seconds]','FontSize',10);
end

function setRangeEdits(C3,hEditStartHH,hEditStartMM,hEditStartSS,hEditEndHH,hEditEndMM,hEditEndSS)
    set(hEditStartHH,'String','00');
    set(hEditStartMM,'String','00');
    set(hEditStartSS,'String','00');
    lengthInSeconds = length(C3.ecg.data)/C3.ecg.fs;
    lengthHHMMSS = datestr(lengthInSeconds/24/3600, 'HH:MM:SS');
    set(hEditEndHH,'String',lengthHHMMSS(1:2));
    set(hEditEndMM,'String',lengthHHMMSS(4:5));
    set(hEditEndSS,'String',lengthHHMMSS(7:8));
    %DEBUG
%     display(length(C3.ecg.data));
%     display(C3.ecg.fs);
%     display(lengthInSeconds);
end

