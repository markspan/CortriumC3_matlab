function report_fullpath = generateReport(json_fullpath)
    % If the computer running this script, has username 'CT' (Christian Toft)
    % logged in, then it's running without webserver setup,
    % and there are lines in this script that should be ignored.
    if strcmp('CT',getenv('username'))
        runThis = false;
    else
        runThis = true;
    end
    
    % Root path to Cortrium Matlab scripts
    cortrium_matlab_scripts_root_path = getCortriumScriptsRoot;
    
    % pdf toolkit path
    pdftk_exe = ['"' cortrium_matlab_scripts_root_path filesep 'bin' filesep 'pdftk.exe"'];
    
    % Links for emails
    download_link_local = '\\192.168.1.5\disk1\docs\webserver_root\cortrium\upload_script\reports\';
    download_link_public = 'https://cloud.graasubstans.dk/webserver_root/cortrium/upload_script/reports/';
    
    % Path assumed for processed BLE's and completed reports.
    % If it does not exist, it will be created.
    recordings_processed_path = [cortrium_matlab_scripts_root_path filesep 'RECORDINGS_processed'];
    if ~exist(recordings_processed_path,'dir')
        mkdir(recordings_processed_path);
    end
    
    % Read and parse the JSON file
    [json_path,json_filename_wo_extension,json_extension] = fileparts(json_fullpath);
    if exist(json_fullpath, 'file') == 2
        fid = fopen(json_fullpath);
        raw = fread(fid,inf);
        jsonstr = char(raw');
        fclose(fid);
        jsondata = JSON.parse(jsonstr);
    else
        error(['JSON file: ' json_filename_wo_extension json_extension ' does not exist at path ' json_path]);
    end
    
    % It is assumed that the BLE file exists in the same folder as the JSON
    % file, AND that the BLE has the same name as the JSON, except for the
    % extension.
    ble_fullpath = [json_path filesep json_filename_wo_extension '.BLE'];
    ble_fullpath_original = ble_fullpath;
    json_fullpath_original = json_fullpath;
    % Check that it does exist
    if exist(ble_fullpath, 'file') == 2
        [ble_path,ble_filename_wo_extension,ble_extension] = fileparts(ble_fullpath);
    else
        error(['BLE file: ' [json_filename_wo_extension '.BLE'] ' does not exist at path ' json_path]);
    end
    
    % Make new subfolder and move the JSON and BLE files there, to keep
    % everything tidy. This is also where the PDF files will be saved.
    % The new subfolder has current date and time as last part of its name.
    dateTimeNow = datetime('now');
    dateTimeStr = sprintf('%s_T%s', datestr(dateTimeNow,'yyyymmdd'), datestr(dateTimeNow, 'HHMMSS'));
    new_path = [ble_path filesep ble_filename_wo_extension '_BLE_' dateTimeStr];
    folder_name = [ble_filename_wo_extension '_BLE_' dateTimeStr];
    if ~exist(new_path,'dir')
        mkdir(new_path);
        statusJSONcopy = copyfile(json_fullpath, new_path);
        statusBLEcopy = copyfile(ble_fullpath, new_path);
    else
        statusJSONcopy = copyfile(json_fullpath, new_path);
        statusBLEcopy = copyfile(ble_fullpath, new_path);
    end
    
    if statusJSONcopy && statusBLEcopy
        ble_fullpath = [new_path filesep ble_filename_wo_extension ble_extension];
        % Path to the newly created folder. After processing, this folder
        % will be moved to recordings_processed_path
        recording_path = new_path;
    else
        error('Copying JSON and/or BLE was not a success.')
    end
        
    % Start the report script selected by jsondata.reportmode
    switch jsondata.reportmode
        case 1 % ecgkit report
            error('ecgkit-report... is not set up for this workflow yet.)')
        case 2 % Myant report
            report_fullpath = myantTestReport(jsondata, ble_fullpath);
            % Expected names of csv files generated by the Myant report script
            csv_ecg_filename = [ble_filename_wo_extension '_ecg.csv'];
            csv_accel_filename = [ble_filename_wo_extension '_accel.csv'];
            csv_all_data_filename = [ble_filename_wo_extension '.csv'];
            % Paths to copy csv files to
            download_link_local_csv_ecg = [download_link_local csv_ecg_filename];
            download_link_public_csv_ecg = [download_link_public csv_ecg_filename];
            download_link_local_csv_accel = [download_link_local csv_accel_filename];
            download_link_public_csv_accel = [download_link_public csv_accel_filename];
            download_link_local_csv_all_data = [download_link_local csv_all_data_filename];
            download_link_public_csv_all_data = [download_link_public csv_all_data_filename];
            % copy the csv files to download path
            if runThis % This is only run if the logged in username is not 'CT' (Christian Toft)
                if ~copyfile([recording_path filesep csv_ecg_filename], download_link_local_csv_ecg)
                    error(['Failed to move file : ' csv_ecg_filename ' to ' download_link_local_csv_ecg]);
                end
                if ~copyfile([recording_path filesep csv_accel_filename], download_link_local_csv_accel)
                    error(['Failed to move file : ' csv_accel_filename ' to ' download_link_local_csv_accel]);
                end
                if ~copyfile([recording_path filesep csv_all_data_filename], download_link_local_csv_all_data)
                    error(['Failed to move file : ' csv_all_data_filename ' to ' download_link_local_csv_all_data]);
                end
            end
        otherwise % no report
            error(['Report mode ' jsondata.reportmode ' does not match a defined report script.']);
    end
    [pdf_path,pdf_filename_wo_extension,pdf_extension] = fileparts(report_fullpath);
    
    % Delete JSON and BLE from inbox folder (not from the newly created subfolder which holds a copy).
    % Turn off recycling, so delete actually means delete, and not "Fill my recycle bin."
    recycle('off');
    delete(json_fullpath_original);
    delete(ble_fullpath_original);
    
    %% ENCRYPT PDF
    
    encryptedfilename = [pdf_filename_wo_extension '-enc128bit'];
    encrypted_pdf_path = [pdf_path filesep encryptedfilename pdf_extension];

    try 
        if ~isempty(jsondata.pdfpassword)
            owner_passwd = jsondata.pdfpassword;
        end
    catch
        owner_passwd = 'cortrium-test'; 
    end

    try 
        if ~isempty(jsondata.pfd_user_passwd)
            user_passwd = jsondata.pfd_user_passwd;
        end
    catch
        user_passwd = 'cortrium-user'; 
    end

    system([pdftk_exe ' ' report_fullpath ' output ' pdf_path filesep encryptedfilename pdf_extension ' owner_pw ' owner_passwd ' userpw ' user_passwd ' allow printing']); %compress encrypt_128bit 

    download_link_local_pdf = [download_link_local encryptedfilename pdf_extension];
    download_link_public_pdf = [download_link_public encryptedfilename pdf_extension];
    download_link_public_log = [download_link_public json_filename_wo_extension '.JSON-log.txt'];

    if runThis % This is only run if the logged in username is not 'CT' (Christian Toft)
        if ~copyfile([recording_path filesep encryptedfilename '.pdf'], download_link_local_pdf)
            error(['Failed to move file : ' encryptedfilename pdf_extension ' to ' download_link_local_pdf]);
        end
    end

    fileinfo = dir([recording_path filesep encryptedfilename pdf_extension]);
    pdf_filesize_mb = fileinfo.bytes/(1024*1024);
    
    %% SEND IT
    
    delhist = false; %delete history file
    %recipient = {'nielssandholm@cortrium.com', 'jonatansmp@cortrium.com', 'larskusk@cortrium.com', 'heineskov@cortrium.com', 'eriksp@cortrium.com', 'christiantoft@cortrium.com', 'jen@cortrium.com'};
    try 
        recipient = jsondata.email;
    catch
        recipient = 'christiantoft@cortrium.com';
    end

    try 
        subject = jsondata.emailsubject;
    catch
        subject = 'Cortrium PDF report';
    end

    try 
        email_attach_pdf = jsondata.email_attach_pdf;
    catch
        email_attach_pdf = 'yes';
    end

    attachments = {};

    if strcmp(email_attach_pdf,'yes') && (pdf_filesize_mb < 25)
        email_attach_pdf_msg = 'Further, please find your encrypted Cortrium PDF report attached to this email.';
        attachments = {encrypted_pdf_path};
    elseif (pdf_filesize_mb >= 25)
        email_attach_pdf_msg = ['Your PDF report was above 25 MB and has not been attached (size: ' pdf_filesize_mb ' MB).'];
    else
        email_attach_pdf_msg = 'Your have chosen not to attach the PDF report in this email.';
    end

        switch jsondata.reportmode
            case 2 % Message for Myant report
                % 10 == linesep
                message = [...
                    'Your data has been analysed in the cloud and your Cortrium PDF report is now ready!' 10 ...
                    10 ...   
                    10 ...
                    'Your encrypted PDF report can be downloaded from: ' 10 download_link_public_pdf 10 ...
                    10 ...
                    'A logfile of the analysis can be downloaded from: ' 10 download_link_public_log 10 ...
                    10 ...
                    'Use the password: ' owner_passwd ' to open the document.' 10 ...
                    10 ...
                    email_attach_pdf_msg 10 ...
                    10 ...
                    'The unfiltered ECG and Accelerometer data can be downloaded as csv files from:' 10 download_link_public_csv_ecg 10 download_link_public_csv_accel 10 ...
                    10 ...
                    'A csv file with unfiltered Temperature, Accelerometer, Respiration, and ECG data can be downloaded from:' 10 download_link_public_csv_all_data 10 ...
                    10 ...
                    'Enjoy your day,' 10 ...
                    'The Cortrium Team'
                    ];
            otherwise % Message for any other report
                % 10 == linesep
                message = [...
                    'Your data has been analysed in the cloud and your Cortrium PDF report is now ready!' 10 ...
                    10 ...   
                    10 ...
                    'Your encrypted PDF report can be downloaded from: ' 10 download_link_public_pdf 10 ...
                    10 ...
                    'A logfile of the analysis can be downloaded from: ' 10 download_link_public_log 10 ...
                    10 ...
                    'Use the password: ' owner_passwd ' to open the document.' 10 ...
                    10 ...
                    email_attach_pdf_msg 10 ...
                    10 ...
                    'Enjoy your day,' 10 ...
                    'The Cortrium Team'
                    ];
        end



    sender = '"Cortrium Report System" <report@cortrium.com>';
    smtp_user = 'report@cortrium.com';
    smtp_passwd = '8e0Y498!';
    smtp_server = 'mail15.surf-town.net';
    smtp_port = '465';

    if ~islogical(delhist), error('error! - delhist'), end
    %if ~ischar(recipient), error('error! - recipient'), end
    if ~ischar(subject), error('error! - subject'), end
    if ~ischar(message), error('error! - message'), end
    if ~ischar(sender), error('error! - sender'), end
    if ~ischar(smtp_user), error('error! - smtp_user'), end
    if ~ischar(smtp_passwd), error('error! - smtp_passwd'), end
    %...more argument checking here...

    % validemail='[a-z_.1-9]+@[a-z_.1-9]+\.(com|net|edu)';
    % imatch=regexp(sender,validemail);
    % if isempty(imatch) || ~isscalar(imatch) || imatch>1
    %     error('not a valid email address')
    % end

    % set mail preferences
    setpref('Internet','SMTP_Server',smtp_server)
    setpref('Internet','E_mail',sender)
    setpref('Internet','SMTP_Username',smtp_user)
    setpref('Internet','SMTP_Password',smtp_passwd)

    props = java.lang.System.getProperties;
    props.setProperty('mail.smtp.auth','true');
    props.setProperty('mail.smtp.socketFactory.class', ...
        'javax.net.ssl.SSLSocketFactory');
    props.setProperty('mail.smtp.socketFactory.port',smtp_port);

    % send the message
    try
        sendmail(recipient,subject,message, attachments)
    catch ME
        disp(ME.message)
        fprintf('...erasing private data\n')
    end

    % and erase the record
    setpref('Internet','SMTP_Server','')
    setpref('Internet','E_mail','')
    setpref('Internet','SMTP_Username','')
    setpref('Internet','SMTP_Password','')
    %clc
    if delhist
        com.mathworks.mlservices.MLCommandHistoryServices.removeAll
    else
        warning('command history may contain your password!');
    end

    %% MOVE PROCESSED FOLDER TO recordings_processed_path

    %if ~movefile([filename_path filesep filename_wo_extension '.*'], recording_path)
    if ~movefile(recording_path, recordings_processed_path)
        error(['Failed to move file : ' recording_path '.* to ' recordings_processed_path]);
    end
    
    % Final path to the generated (unencrypted) pdf
    report_fullpath = [recordings_processed_path filesep folder_name filesep pdf_filename_wo_extension pdf_extension];
end